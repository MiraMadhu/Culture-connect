from flask import Flask
from flask_login import LoginManager
from models import db, User, Category
from auth import auth_bp
from routes import main_bp

def create_app():
    app = Flask(__name__)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///cultural_forum.db'
    app.config['SECRET_KEY'] = 'your-secret-key-change-this'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    
    # Initialize extensions
    db.init_app(app)
    
    login_manager = LoginManager()
    login_manager.init_app(app)
    login_manager.login_view = 'auth.login'
    login_manager.login_message = 'Please log in to access this page.'
    
    @login_manager.user_loader
    def load_user(user_id):
        return User.query.get(int(user_id))
    
    # Register blueprints
    app.register_blueprint(auth_bp)
    app.register_blueprint(main_bp)
    
    # Create database tables and seed categories
    with app.app_context():
        db.create_all()
        
        # Seed categories if they don't exist
        if Category.query.count() == 0:
            categories = [
                Category(name='General Discussion', description='General topics and discussions', icon='💬'),
                Category(name='Language Learning', description='Learn and practice languages', icon='🌐'),
                Category(name='Cultural Exchange', description='Share your culture and traditions', icon='🎭'),
                Category(name='Travel & Tourism', description='Travel tips and destination guides', icon='✈️'),
                Category(name='Food & Cuisine', description='Share recipes and food traditions', icon='🍽️'),
                Category(name='Arts & Crafts', description='Traditional arts and crafts', icon='🎨'),
                Category(name='Music & Entertainment', description='Music, movies, and entertainment', icon='🎵'),
                Category(name='News & Events', description='Current events and news', icon='📰'),
            ]
            for category in categories:
                db.session.add(category)
            db.session.commit()
    
    return app
